#!/usr/bin/env bash

usage() {
	echo "usage: git compare [options] [remote] [target_branch] [base_branch]";
	echo;
	echo "Compare options";
	echo "    -h        show this message";
	echo "    -s        one-line output";
	echo "    -r        reverse. Use target_branch as base for comparison.";
	echo;
	echo "Default values:";
	echo "    remote:          current tracking remote";
	echo "    target_branch:   current tracking branch";
	echo "    base_branch:     current branch";
}

output_format="normal";
reverse=false;

while getopts "hsr" opt; do
	case $opt in
		s)
			output_format="oneline";
			;;

		r)
			reverse=true;
			;;

		*|h)
			usage;
			if [ $opt == "h" ]; then
				exit 0;
			else
				exit 1;
			fi
			;;
	esac
done
shift "$(($OPTIND - 1))"

current_branch="$(git rev-parse --abbrev-ref HEAD)";

base_branch=;
target_branch=;

case $# in
	0)
		base_branch="$current_branch";
		target_branch="$(git rev-parse --abbrev-ref --symbolic-full-name @{u})";
		;;

	1)
		base_branch="$current_branch";
		target_branch="$1/${base_branch}";
		;;

	2)
		base_branch="$current_branch";
		target_branch="$1/$2";
		;;

	3)
		base_branch="$3";
		target_branch="$1/$2";
		;;

	*)
		echo "Not sure how to parse those arguments man.. RTFM!";
		echo;
		usage;
		exit 1;
		;;
esac

if [ "$reverse" == true ]; then
	tmp="$base_branch";
	base_branch="$target_branch";
	target_branch="$tmp";
	unset tmp;
fi

if [ "$output_format" == "normal" ]; then
	git log "${target_branch}..${base_branch}";
elif [ "$output_format" == "oneline" ]; then
	git log "${target_branch}..${base_branch}" --oneline;
fi
