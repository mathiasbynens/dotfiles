#!/usr/bin/env bash

TAG_MAX_LENGTH=20;
OUTPUT_FORMAT="expanded";
SHA_ONLY=false;

while getopts ":sc" opt; do
  case $opt in
    s)
    OUTPUT_FORMAT="small";
    shift 1;
    ;;

    c)
    SHA_ONLY=true;
    shift 1;
    ;;
  esac
done

# declare -A TEXT_COLORS;
# TEXT_COLORS=(
#   [GREEN]="\033[0;32m"
#   [ORANGE]="\033[0;33m"
#   [BLUE]="\033[0;34m"
#   [NORMAL]="\033[0m"
# )

# Define colors
black='\033[0;30m'
white='\033[0;37m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
orange='\033[0;33m'
blue='\033[0;34m'
magenta='\033[0;35m'
cyan='\033[0;36m'
normal='\033[0m'

isValidTag() {
  git rev-parse "$1" > /dev/null 2>&1;
  echo $?;
}

getSHAbyTag() {
  git rev-parse "$1";
}

printTagInfo() {
  local TAG="$1";

  isValid=$(isValidTag "$TAG");
  if [ $isValid -ne 0 ]; then
    echo "\"$TAG\" is not a valid ref. (exit code: $isValid)";
    exit 1;
  fi

  local COMMIT_SHA=$(getSHAbyTag $TAG);

  if [ $SHA_ONLY == true ]; then
    echo "$COMMIT_SHA";
    return;
  fi

  local COMMIT_MESSAGE=$(git show -s --format=%s "$COMMIT_SHA");
  local COMMIT_AUTHOR=$(git --no-pager show -s --format='%an <%ae>' "$COMMIT_SHA");
  local COMMIT_DATE=$(git --no-pager show -s --format='%ci' "$COMMIT_SHA");
  local FORMATTED_TAG;

  if [ ${#TAG} -gt $TAG_MAX_LENGTH ]; then
    FORMATTED_TAG="${TAG:0:(($TAG_MAX_LENGTH - 3))}...";
  else
    FORMATTED_TAG="$TAG";
  fi

  printf "${green}%s${normal}" "$FORMATTED_TAG";
  printf "%*.*s" $(($TAG_MAX_LENGTH + 2 - ${#FORMATTED_TAG}));
  printf "${orange}%s${normal}\n" "$COMMIT_SHA";

  if [ $OUTPUT_FORMAT == "expanded" ]; then
    printf "%*.*s" $(($TAG_MAX_LENGTH + 2));
    printf "${blue}\"%s\"${normal}\n" "$COMMIT_MESSAGE";

    printf "%*.*s" $(($TAG_MAX_LENGTH + 2));
    printf "Author: ";
    # printf "%*.*s" $((8 - $(expr length 'Author:')));
    printf "%s\n" "$COMMIT_AUTHOR";

    printf "%*.*s" $(($TAG_MAX_LENGTH + 2));
    printf "Date:   ";
    # printf "%*.*s" $((8 - $(expr length 'Date:')));
    printf "%s\n\n" "$COMMIT_DATE";
  fi
}

if [ $# -gt 0 ]; then
  # Find commit-SHA for specific tag.
  for tag in $@; do
    printTagInfo "$tag";
  done
  exit 0;
fi

for tag in $(git tag -l); do
  printTagInfo "$tag";
done
