[credential]
	helper = osxkeychain

[alias]

	# Branch, commit & remote management
	co = checkout
	br = "!f() { git checkout -b $1; }; f"
	mr = !"(git checkout main || git checkout master) && git pull"
	mbr = !"git mr && git br"
	pl = pull origin HEAD
	sync = !"(git pull origin main || git pull origin master)"
	cl = clone --recursive
	lg = !"git --no-pager log --color --graph -n 20  --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"
	# a.k.a. ‘delete merged’
	tidy = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	undopush= push -f origin HEAD^:HEAD
	undomasterpush= push -f origin HEAD^:master

	# Commiting
	s = status -s
	d = diff --color --color-words --abbrev
	a = add -A
	c = commit -m
	ca = !"git a && git c"
	ph = push --tags origin HEAD --no-verify
	fix = commit --amend --reuse-message=HEAD --no-edit
	fixup = !git fix && git push origin HEAD --force
	fixupa = !git a && git fixup

	# UTILS
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Interactive rebase with the given number of latest commits
	# reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find commits by source code
	find = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	root = '[ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`'

	move = "!f() { \
		MESSAGE = git log -1 HEAD --pretty=format:%s); \
		git reset HEAD~ --soft; \
		git stash; \
		git checkout $1 || git br $1; \
		git stash pop; \
		g ca $MESSAGE; \
	}; f"


[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	filemode = false

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = matching

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:wheresrhys/"]
  insteadOf = "git://github.com/wheresrhys/"
