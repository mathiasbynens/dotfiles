#compdef git-pulls
# ------------------------------------------------------------------------------
# Copyright (c) 2011 Github zsh-users - http://github.com/zsh-users
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the zsh-users nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ZSH-USERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for git-pulls 0.3.1 (https://git-pulls.com/schacon/git-pulls).
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Julien Nicoulaud (https://github.com/nicoulaj)
#
# ------------------------------------------------------------------------------


_git-pulls() {
  typeset -A opt_args
  local context state line curcontext="$curcontext"

  local ret=1

  _arguments -C \
    '(- 1 *)--help[show usage]' \
    '1:cmd:->cmds' \
    '*::arg:->args' \
  && ret=0

  case "$state" in
    (cmds)
      local commands; commands=(
        'update:update pull requests list'
        'list:list pull requests'
        'show:show pull request'
        'browse:open pull request in a web browser'
        'merge:merge pull request'
      )
      _describe -t commands 'command' commands && ret=0
    ;;
    (args)
      curcontext="${curcontext%:*:*}:git-pulls-cmd-$words[1]:"
      case $words[1] in
        (update)
          _message 'no more arguments' && ret=0
        ;;
        (list)
          _arguments \
            '--reverse[list in reverse order]' \
          && ret=0
        ;;
        (show)
          _arguments \
            '1: :_git-pulls_pull_requests_numbers' \
            '--full[use verbose output]' \
          && ret=0
        ;;
        (browse|merge)
          _arguments \
            '1: :_git-pulls_pull_requests_numbers' \
          && ret=0
        ;;
      esac
    ;;
  esac

  return ret
}

(( $+functions[_git-pulls_pull_requests_numbers] )) ||
_git-pulls_pull_requests_numbers() {
  local pull_requests; pull_requests=(${${${(M)${(f)"$(_call_program users $service list)"}:#[[:digit:]]##[[:space:]]*}//:/\\:}/[[:space:]]##/:})
  _describe -t pull-request-numbers 'pull request number' pull_requests "$@"
}

_git-pulls "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
