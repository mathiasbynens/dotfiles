
# http://andrewray.me/bash-prompt-builder/index.html

MAX_CONFLICTED_FILES=3
DELTA_CHAR="✻"
CONFLICT_CHAR="☣"
BISECTING_TEXT="bisecting ϕ"
NOBRANCH_TEXT="no branch! ʘ"
SUBMODULE_TEXT="[submodule] "

# Colors for prompt
RED=$(tput sgr0 && tput setaf 1)
GREEN=$(tput sgr0 && tput setaf 2)
YELLOW=$(tput sgr0 && tput setaf 3)
BLUE=$(tput sgr0 && tput setaf 4)
MAGENTA=$(tput sgr0 && tput setaf 5)
CYAN=$(tput sgr0 && tput setaf 6)
GRAY=$(tput sgr0 && tput setaf 7)
WHITE=$(tput sgr0 && tput setaf 7 && tput bold)
LIGHTRED=$(tput sgr0 && tput setaf 1 && tput bold)
LIGHTGREEN=$(tput sgr0 && tput setaf 2 && tput bold)
LIGHTYELLOW=$(tput sgr0 && tput setaf 3 && tput bold)
LIGHTBLUE=$(tput sgr0 && tput setaf 4 && tput bold)
LIGHTMAGENTA=$(tput sgr0 && tput setaf 5 && tput bold)
LIGHTCYAN=$(tput sgr0 && tput setaf 6 && tput bold)

RESET=$(tput sgr0)



_git_dir=""
function _git_check {
    _git_dir=`git rev-parse --show-toplevel 2> /dev/null`
    if [[ "$_git_dir" == "" ]]; then
        return 1
    else
        return 0
    fi
}

function is_submodule() {
    local parent_git=`cd "$_git_dir/.." && git rev-parse --show-toplevel 2> /dev/null`
    if [[ -n $parent_git ]]; then
        local submodules=`cd $parent_git && git submodule --quiet foreach 'echo $path'`
        for line in $submodules; do
            cd "$parent_git/$line"
            if [[ `pwd` = $_git_dir ]]; then return 0; fi
        done
    fi
    return 1
}

dvcs_function="
    # Figure out what repo we are in
    _git_check \

    # Build the prompt!
    prompt=\"\"

    # If we are in git ...
    if [ -n \"\$_git_dir\" ]; then
        # find current branch
        gitBranch=\$(git symbolic-ref HEAD 2> /dev/null)
        gitStatus=\`git status\`

        # Figure out current branch, or if we are bisecting, or lost in space
        bisecting=\"\"
        noBranch=\"\"
        if [ -z \"\$gitBranch\" ]; then
            bisect=\$(git rev-list --bisect 2> /dev/null | cut -c1-7)
            if [ -z \"\$bisect\" ]; then
            noBranch=True
            gitBranch=\"\\[\$RED\\]\$NOBRANCH_TEXT\\[\$YELLOW\\]\"
        else
            bisecting=\"\\[\$MAGENTA\\]\$BISECTING_TEXT:\"\$bisect\"\\[\$YELLOW\\]\"
            gitBranch=\"\"
        fi
        fi

        # changed *tracked* files in local directory?
        gitChange=\$(echo \$gitStatus | ack 'modified:|deleted:|new file:')
        if [ -n \"\$gitChange\" ]; then
            gitChange=\"\\[\$YELLOW\\] \\[`tput sc`\\]  \\[`tput rc`\\]\\[\$DELTA_CHAR\\] \"
        fi

        # output the branch and changed character if present
        prompt=\$prompt\"\\[\$YELLOW\\] (\"
        prefix=\"\\[\$COLOR_YELLOW\\]᚜ \\[\$COLOR_YELLOW\\]\"

        if is_submodule; then
            prompt=\$prompt\"\\[\$MAGENTA\\]\$SUBMODULE_TEXT\\[\$YELLOW\\]\"
        fi

        prompt=\$prompt\$prefix\${gitBranch#refs/heads/}\$bisecting
        revNo=\$(git rev-parse HEAD 2> /dev/null | cut -c1-7) || return

        # If bisecting don't output revno
        if [ -z \"\$bisecting\" ] && [ -z \"\$noBranch\" ];then
            prompt=\$prompt\":\$revNo\"
        fi
        prompt=\$prompt\"\$gitChange\\[\$YELLOW\\])\\[\$RESET\\]\"

        # How many local commits do you have ahead of origin?
        num=\$(echo \$gitStatus | grep \"Your branch is ahead of\" | awk '{split(\$0,a,\" \"); print a[11];}') || return
        if [ -n \"\$num\" ]; then
            prompt=\$prompt\"\\[\$CYAN\\] +\$num\"
        fi

        # any conflicts? (sed madness is to remove line breaks)
        files=\$(git ls-files -u | cut -f 2 | sort -u | sed '$(($MAX_CONFLICTED_FILES+1)),1000d' |  sed -e :a -e '\$!N;s/\\\n/, /;ta' -e 'P;D')
    fi



    # Show conflicted files if any
    if [ -n \"\$files\" ]; then
        prompt=\$prompt\" \\[\$RED\\](\\[\$YELLOW\\]\"
        prompt=\$prompt\"\\[`tput sc`\\]  \\[`tput rc`\\]\\[\$YELLOW\\]\\[\$CONFLICT_CHAR\\] \"
        prompt=\$prompt\"\\[\$RED\\] \${files})\"
    fi

    echo -e \$prompt"
# End code auto generated by http://andrewray.me/bash-prompt-builder/index.html

#PS1="\[${BOLD}${MAGENTA}\]\u\[$WHITE\]@\[$ORANGE\]\h\[$WHITE\]:\[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" => \[$PURPLE\](\")\[$PURPLE\]\$(parse_git_branch)\$([[ -n \$(git branch 2> /dev/null) ]] && echo \")\")\[$WHITE\]\$ \[$RESET\]"

#PS1="\[${BOLD}${MAGENTA}\]\u\[$GRAY\]@\[$LIGHTRED\]\h\[$WHITE\]:\[$GREEN\]\w\[$WHITE\]\$(${dvcs_function})\[$RESET\] $ "
PS1="\[${BOLD}${MAGENTA}\]MrM\[$GRAY\]@\[$LIGHTRED\]MrM\[$WHITE\]:\[$GREEN\]\w\[$WHITE\]\$(${dvcs_function})\[$RESET\] $ "


