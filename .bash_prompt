# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://i.imgur.com/s0Blh.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		MAGENTA=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		GREEN=$(tput setaf 190)
		PURPLE=$(tput setaf 141)
		WHITE=$(tput setaf 0)
	else
		MAGENTA=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		PURPLE=$(tput setaf 1)
		WHITE=$(tput setaf 7)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	MAGENTA="\033[1;31m"
	ORANGE="\033[1;33m"
	GREEN="\033[1;32m"
	PURPLE="\033[1;35m"
	WHITE="\033[1;37m"
	BOLD=""
	RESET="\033[m"
fi

export MAGENTA
export ORANGE
export GREEN
export PURPLE
export WHITE
export BOLD
export RESET

is_git_repo() {
    git rev-parse --is-inside-work-tree &> /dev/null
}
 
get_git_branch() {
    local branch_name
 
    # Get the short symbolic ref
    branch_name=$(command git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(command git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"
 
    echo $branch_name
}
 
# Git status information
function prompt_git() {
    local git_info git_state uc us ut st
 
    if ! is_git_repo; then
        return 1
    fi
 
    git_info=$(get_git_branch)
 
    # Check for uncommitted changes in the index
    if ! `command git diff --quiet --ignore-submodules --cached`; then
        uc=""
    fi
 
    # Check for unstaged changes
    if ! `command git diff-files --quiet --ignore-submodules --`; then
        us="*"
    fi
 
    # Check for untracked files
    if [ -n "$(command git ls-files --others --exclude-standard)" ]; then
        ut=""
    fi
 
    # Check for stashed files
    if `command git rev-parse --verify refs/stash &>/dev/null`; then
        st=""
    fi
 
    git_state=$uc$us$ut$st
 
    # Combine the branch name and state information
    if [[ $git_state ]]; then
        git_info="$git_info$git_state"
    fi
 
    printf " on ${PURPLE}${git_info}"
}

export PS1="\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$(prompt_git)\[$WHITE\]\n\$ \[$RESET\]"
export PS2="\[$ORANGE\]→ \[$RESET\]"