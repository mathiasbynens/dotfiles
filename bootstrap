#!/usr/bin/env bash

set -euo pipefail

if [[ ! -f bootstrap ]]; then
	echo "Bootstrap must be run from dotfiles directory ..."
	exit 1
fi

DOTFILES=$HOME/dotfiles

# COLORS
RED='\e[0;31m'
BLUE='\e[0;34m'
YELLOW='\e[1;33m'
WHITE='\e[1;37m'
GREEN='\e[0;32m'
RESET='\e[0m'

case "$OSTYPE" in
  darwin*)
	os='mac'
    ;;
  *)
	os='nix'
    ;;
esac

cat extras/dougie-bootstrap

successfully() {
	$* || (echo "failed" 1>&2 && exit 1)
}

exe() { echo "\$ $@" ; "$@" ; }

exe_fancy(){
    "$@"
    if [[ $? -eq 0 ]]; then
        icon_success
    else
        icon_fail
    fi
}

HEADER="%-30s %6s"
DIVIDER="========================================="
DIVIDER=${DIVIDER}${DIVIDER}

printf "${HEADER}" "Task" "Status"
printf "\n${DIVIDER}\n"

icon_success() {
    # 
    printf "\t{GREEN}\Uf058{RESET\n"
}

icon_fail() {
    # 
    printf "\t{RED}\Uf06a{RESET}\n"
}

icon_question() {
    # 
    printf "\t{BLUE}\Uf059{RESET}\n"
}

icon_warning() {
    # 
    printf "\t{YELLOW}\Uf071{RESET}"
}

# 
# 

info() {
   printf "%-30s" "$1"
}

backup() {
    info "Backing up dotfiles..."
    # Backup the current dotfiles
    DATE=$(date +"%Y%m%d-%H%M")
    olddir=$HOME/dotfiles-$DATE.old
    info "re-creating backup directory [$olddir]"
    if [[ -d "$olddir" ]]; then
        rm -rf $olddir
        mkdir -p $olddir
    else
        mkdir -p $olddir
    fi

    info "Backup complete..."
    exe_fancy find ~ -maxdepth 1 -name ".[^.]*" -type f -exec echo "backing up {} ..." \; -exec cp -rf "{}" $olddir \;
}

update_repo(){
    info "\Uf1d2 updating git \Uf1d2\n"
    info "---------------------------\n"
    info "Updating repository..."
    exe_fancy git pull origin master

    info "Updating submodules..."
    exe_fancy git submodule update --init
}

bootstrap_linux() {
    info "{YELLOW}\uf17c{RESET} Setting up Linux{YELLOW}\uf17c{RESET}"
    # Add Python repository
    sudo add-apt-repository ppa:deadsnakes/ppa
    sudo apt-get update -qq

	sudo apt-get install -qq \
		curl \
		git \
		vim \
        fzf \
		rsync \
        python3.9 \
		python3-pip \
        ripgrep \
		ssh

    sudo pip3 install virtualenvwrapper -qq

    # Install homebrew for linux
    # /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

bootstrap_mac(){
    info "{BLUE}\uf179{RESET} Setting up Mac{BLUE}\uf179{RESET}"
    exe_fancy sh brew.sh
}

bootstrap_windows() {
    info "{BLUE}\uf17a{RESET} Setting up Windows{BLUE}\uf17a{RESET}"
}

link() {
    info "Linking $1 -> $2..."
    exe_fancy ln -fs $1 $2
}

nerdfont_robotomono() {
    info "Downloading RobotoMono Nerd Fonts..."
    exe_fancy curl -LO https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/RobotoMono.zip
}

link_shell() {
    for FILE in shell; do
        link "$DOTFILES/shell/$FILE" $HOME
    done
}

configure_ssh() {
    info "Configuring SSH..."
    if [[ ! -d $HOME/.ssh ]]; then
        mkdir $HOME/.ssh
    fi

    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/authorized_keys
}

configure_vim() {
    echo "Installing vim-plug..."
    if [[ ! -f ~/.vim/autoload/plug.vim ]]; then
        exe_fancy curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
          https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    else
        warning "already installed"
    fi
}

install_starship() {
    # Install starship
    info "Installing starship..."
    exe_fancy curl -fsSL https://starship.rs/install.sh | bash

    cp .starship.toml ~/.config
    # Ignore this until starship git prompt speeds up
    # echo 'eval "$(starship init zsh)"' >> ~/.zshrc
}

install_powerline() {
    info "Installing powerline-fonts ..."
    pushd powerline-fonts
    exe_fancy ./install.sh
    popd
}

install_zplug() {
    info "Installing zplug..." 
    exe_fancy /bin/zsh -c "$(curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh)"
    
    link $DOTFILES/apps/zplug/.zplug.zsh $HOME/.zplug.zsh
    echo "[ -f ~/.zplug.zsh ] && source ~/.zplug.zsh" >> $HOME/.zshrc
}

zsh_theme() {
    THEME=${1:-dracula} 
    sed -i "s/ZSH_THEME=.*/ZSH_THEME=${THEME}/" $HOME/.zshrc
}

install_zsh() {
    info "Installing zsh..."
    exe_fancy sudo apt-get install zsh -y
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

    # Updating DEFAULT_USER to suppress username from prompt
    if ! grep -q DEFAULT_USER $HOME/.zshrc ; then	
        echo "Updating DEAFULT_USER in .zshrc ..."
        echo "export DEFAULT_USER=`whoami`" >> $HOME/.zshrc
    fi

    install_zplug
    zsh_theme dracula
    
    sed -i '/plugins=/{n;s/git/git zsh-syntax-highlighting zsh-autosuggestions/};' $HOME/.zshrc
    chmod -R g-w,o-w ~/.oh-my-zsh/custom/plugins/
}

bootstrap() {
    case $os in
        nix)
            bootstrap_linux
            ;;
        mac)
            bootstrap_mac
            ;;
    esac

    read -p "Install zsh? (y/n) " -n 1;
    echo "";
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Installing oh-my-zsh ..."
        install_zsh
    fi

    info "Creating .config directory (if necessary)"
    if [[ ! -d "~/.config" ]]; then
        mkdir ~/.config
    fi

    configure_vim
    configure_ssh
    link_shell
}

FORCE=""
FUNCTION=bootstrap

while getopts "fwhm:" opt; do
  case $opt in
    f)
        echo "-f was triggered" >&2
        FORCE=1
        ;;
	h)
		echo "Usage: bootstrap.sh [-h] [-w] [-f]"
		exit 1
		;;
    m) 
        FUNCTION=$OPTARG
        ;;
    \?)
        echo "Invalid option" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

update_repo

if [[ $FORCE -eq 1 ]]; then
	bootstrap;
else
	read -p "This may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1;
	echo "";
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		echo ""
        # perform function(s) passed
		${FUNCTION}
	fi;
fi;

info "{BLUE}\uf3a5Boostrapping complete, please reload the shell ...{BLUE}\uf3a5{NC}"
